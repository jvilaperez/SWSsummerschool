#!/usr/bin/env python
"""
Solution of a transient 1D Poisson equation: u_t -u_xx = f
Domain: [0,1]
BC: u(0) = 0, u'(1) = 0
with f = 2*(2*x^2 + 5*x - 2)*exp(x)*(abs(cos(pi*t)))

Finite differences (FD) discretization: second-order diffusion operator
Time discretization: backward Euler (implicit)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Change boundary conditions (Neimann first-order)

"""
__author__ = 'Jordi Vila-PÃ©rez'
__email__ = 'jvilap@mit.edu'


import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation    #We have to load this
from math import pi
%matplotlib qt
plt.close()

"Number of points"
N = 16
Dx = 1/N
x = np.linspace(0,1,N+1)

"Dirichlet boundary condition at x=0"
u0 = 0

"Order of Neumann boundary condition approximation"
order = 2

"Time parameters"
dt = 1/24
time = np.arange(0,3+dt,dt)
nt = np.size(time)

"Initialize solution U"
if order<2:
    U = np.zeros((N+1,nt))
    U[:,0] = x*(3-2*x)*np.exp(x)+u0
else:
    xN = np.concatenate((x, [x[N]+Dx]))
    U = np.zeros((N+2,nt))
    U[:,1] = xN*(3-2*xN)*np.exp(xN)+u0
      
    
"Solution at each time step"
for it in range(0,nt-1):
    if order<2:
        "System matrix and RHS term"
        A = (1/Dx**2)*(2*np.diag(np.ones(N+1)) - np.diag(np.ones(N),-1) - np.diag(np.ones(N),1))
        F = 2*(2*x**2 + 5*x - 2)*np.exp(x)*np.abs(np.cos(pi*time[it+1]))
        
        "Temporal term"
        A = A + (1/dt)*np.diag(np.ones(N+1))
        F = F + U[:,it]/dt
        
        "Boundary condition at x=0"
        A[0,:] = np.concatenate(([1], np.zeros(N)))
        F[0] = u0
        
        "Boundary condition at x=0"
        A[N,:] = np.concatenate((np.zeros(N-1),[-1, 1]))
        F[N] = 0
    else:
        "System matrix and RHS term"
        A = (1/Dx**2)*(2*np.diag(np.ones(N+2)) - np.diag(np.ones(N+1),-1) - np.diag(np.ones(N+1),1))
        F = 2*(2*xN**2 + 5*xN - 2)*np.exp(xN)*np.abs(np.cos(pi*time[it+1]))
        
        "Temporal term"
        A = A + (1/dt)*np.diag(np.ones(N+2))
        F = F + U[:,it]/dt
        
        "Boundary condition at x=0"
        A[0,:] = np.concatenate(([1], np.zeros(N+1)))
        F[0] = u0
        
        "Boundary condition at x=0"
        A[N+1,:] = (0.5/Dx)*np.concatenate((np.zeros(N-1),[-1, 0, 1]))
        F[N+1] = 0

    "Solution of the linear system AU=F"
    u = np.linalg.solve(A,F)
    U[:,it+1] = u
    
    
"Animation of the results"
fig = plt.figure()
ax = plt.axes(xlim =(0, 1),ylim =(u0,u0+5)) 
myAnimation, = ax.plot([], [],':ob',linewidth=2)
plt.grid()
plt.xlabel("x",fontsize=16)
plt.ylabel("u",fontsize=16)

def animate(i):
    plt.plot(x,U[0:N+1,i])
    myAnimation.set_data(x, U[0:N+1,i])
    return myAnimation,

anim = animation.FuncAnimation(fig,animate,frames=range(1,nt),blit=True,repeat=False)

